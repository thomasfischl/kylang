grammar com.github.thomasfischl.kylang.test.TestLang hidden(WS, ML_COMMENT, SL_COMMENT) /*with org.eclipse.xtext.common.Terminals*/

generate testLang "http://www.github.com/thomasfischl/keyword/TestLang"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

/* ----------------------------------------------- */
/*                DOC                              */
/* ----------------------------------------------- */
// * one or none (operator ?)
// * any (zero or more, operator *)
// * one or more (operator +)

Model:
	(keywords+=KeywordDecl)+;

KeywordDecl:
	'keyword' 
	//('<' metatype=ID '>')? 
	name=IDEXT
	'{'
		//TODO description
		(properties+=PropertyDecl)*
		(script=KeywordScript|keywordlist=KeywordList)		
	'}'
	;
	
	
KeywordList:
	(children+=KeywordCall)*	
;

KeywordCall:
	keyword=IDEXT '(' parameters+=Expr (',' parameters+=Expr )* ')'
	
	(
		'{'
			keywordlist=KeywordList
		'}'
		
	)?	
;

KeywordScript:
	'implement' 'as' scriptType=IDEXT '=>' class=STRING 
;

Expr:
	expr=OrExpr
;

OrExpr:
	exprs+=AndExpr ( opt+='||' exprs+=AndExpr)*
;

AndExpr:
	expr+=RelExpr ( opt+='&&' expr+=RelExpr)*
;

RelExpr:
	expr+=SimpleExpr ( ( opt+='==' | opt+='!=' | opt+='<' | opt+='<=' | opt+='>' | opt+='>=' ) expr+=SimpleExpr )?
;

SimpleExpr:
	('+' | '-')? expr+=Term ( ('+'|'-') expr+=Term )*
;

Term:
	expr+=NotFact (( opt+='*' | opt+='/' | opt+='%' ) expr+=NotFact)*
;

NotFact:
	('!')? expr=Fact
;

Fact:
	bool='false' | 
	bool='true' | 
	number=NUMBER | 
	string=STRING| 
	'(' expr=Expr ')'
;

PropertyDecl:
	'property' ('in' | 'out' | 'inout')? name=IDEXT
	(
		'as'
		('number' | 'string' | 'enumeration' '(' values+=IDEXT (',' values+=IDEXT)+ ')')
	)?;


/* ----------------------------------------------- */
/*                lexer                            */
/* ----------------------------------------------- */

//grammar org.eclipse.xtext.common.Terminals hidden(WS, ML_COMMENT, SL_COMMENT)
//											
//import "http://www.eclipse.org/emf/2002/Ecore" as ecore
//
//terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
//terminal INT returns ecore::EInt: ('0'..'9')+;
//terminal STRING	: 
//			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
//			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
//		; 
//terminal ML_COMMENT	: '/*' -> '*/';
//terminal SL_COMMENT 	: '//' !('\n'|'\r')* ('\r'? '\n')?;
//
//terminal WS			: (' '|'\t'|'\r'|'\n')+;
//
//terminal ANY_OTHER: .;


terminal fragment IDEXT_SENTENCE:
	('A'..'Z') ('a'..'z' | 'A'..'Z' | '0'..'9')* (' ' ('a'..'z' | 'A'..'Z' | '0'..'9' | ' ')* )?
;

terminal fragment IDEXT_IDENTIFIER:
	('a'..'z') ('a'..'z' | 'A'..'Z' | '0'..'9')*
;

terminal IDEXT:
	(
		IDEXT_SENTENCE | 
		IDEXT_IDENTIFIER
	) ('_')? ;

terminal STRING	: 
			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"'
		; 	

terminal NUMBER returns ecore::EInt: ('0'..'9')+;
	
terminal ML_COMMENT	: '/*' -> '*/';
terminal SL_COMMENT 	: '//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS			: (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;